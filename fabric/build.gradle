plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

// Needs to be applied after plugins so it knows what (jar) is
apply from: '../discord.gradle'

def branch = System.getenv("GITHUB_REF")
if(branch != null) {
	branch = branch.replace('refs/heads/', '')
}
def isCanary = version.toString().contains('canary')

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "${project.archive}-fabric"
group = project.package

minecraft {
}

repositories {
	maven {
		name = "FabricMC"
		url = "https://maven.fabricmc.net"
	}
	maven {
		name = "Terrafromer MC"
		url = "https://maven.terraformersmc.com/releases"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:1.17.1"
	mappings "net.fabricmc:yarn:1.17.1+build.29"
	modImplementation "net.fabricmc:fabric-loader:0.11.6"

	modRuntime  "com.terraformersmc:modmenu:2.0.5"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.37.1+1.17"
}


tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
	logger.info("Curse api: " + System.getenv("CURSE_API"))
	if (System.getenv("CURSE_API") != null) {
		apiKey = System.getenv("CURSE_API")
	}
	project {
		id = project.curse_project_id
		// TODO add code to reference this but also cut the latest change logs in for the files
		changelog = "${project.github}/blob/${branch}/CHANGELOG.md"
		changelogType = 'markdown'
		releaseType = 'release'
		addGameVersion 'Fabric'
		addGameVersion '1.17.1'
		relations {
			requiredDependency "fabric-api"
		}

		mainArtifact remapJar
		addArtifact jar
	}

	options {
		forgeGradleIntegration = false
	}
}

task publish {
	doLast {
		println "This is a dummy task to run others for version: ${version}"
	}
}

task cleanbuildfolder {
	doLast {
		println "Cleaning up previous builds (to stop publishing old ones by mistake)"
		project.delete(files("${buildDir}/libs"))
	}
}

compileJava.dependsOn 'cleanbuildfolder'

// Publish rules
// Current behavior seems to be canary or release. Though pre-releases may break this pattern.
publish.dependsOn 'build'
//publish.finalizedBy 'discordupload'
if (!isCanary) {
	publish.finalizedBy 'curseforge'
}
