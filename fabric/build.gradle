plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

// Needs to be applied after plugins so it knows what (jar) is
apply from: '../discord.gradle'

def branch = System.getenv("GITHUB_REF")
if(branch != null) {
    branch = branch.replace('refs/heads/', '')
}
if(branch == null) {
    branch = "master"
}
def isCanary = version.toString().contains('canary')

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archive}-fabric"
group = project.package

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

repositories {
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = "Terrafromer MC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
}

processResources {
    from project(":core").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// Stops trying to resolve forge dependencies while doing fabric
configurations {
    all {
        exclude group: "net.minecraftforge"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:1.18"
    mappings minecraft.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:0.11.6"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.43.1+1.18"

    implementation project(":core")

    modImplementation "com.terraformersmc:modmenu:3.0.0"

    include "me.shedaniel.cloth:cloth-config-fabric:6.1.50"
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:6.1.50"

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:4.0.0"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:4.0.0"

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:4.0.0"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:4.0.0"
    implementation project(":core")
}


tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
    logger.info("Curse api: " + System.getenv("CURSE_API"))
    if (System.getenv("CURSE_API") != null) {
        apiKey = System.getenv("CURSE_API")
    }
    project {
        id = project.curse_project_id
        // TODO add code to reference this but also cut the latest change logs in for the files
        changelog = "${project.github}/blob/master/CHANGELOG.md"
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion 'Fabric'
        addGameVersion '1.18'
        relations {
            requiredDependency "fabric-api"
        }

        mainArtifact remapJar
        addArtifact jar
    }

    options {
        forgeGradleIntegration = false
    }
}

tasks.withType(JavaCompile) {
    source(project(":core").sourceSets.main.allSource)
}

task publish {
    doLast {
        println "This is a dummy task to run others for version: ${version}"
    }
}

task cleanbuildfolder {
    doLast {
        println "Cleaning up previous builds (to stop publishing old ones by mistake)"
        project.delete(files("${buildDir}/libs"))
    }
}

compileJava.dependsOn 'cleanbuildfolder'

// Publish rules
// Current behavior seems to be canary or release. Though pre-releases may break this pattern.
publish.dependsOn 'build'
publish.finalizedBy 'discordupload'
if (!isCanary) {
    publish.finalizedBy 'curseforge'
}
