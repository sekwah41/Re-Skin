buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven {url "https://plugins.gradle.org/m2/"}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "java"
apply plugin: 'eclipse'
//apply plugin: 'maven-publish'

// May be able to remove it
apply plugin: "org.spongepowered.mixin"

// Needs to be applied after plugins so it knows what (jar) is
apply from: '../discord.gradle'

def branch = System.getenv("GITHUB_REF")
if(branch != null) {
    branch = branch.replace('refs/heads/', '')
}
if(branch == null) {
    branch = "master"
}
def isCanary = version.toString().contains('canary')

group = project.package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${project.archive}-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

//repositories {
//    mavenLocal()
//    mavenCentral()
//    maven {
//        url 'https://dvs1.progwml6.com/files/maven'
//    }
//    maven { url = "https://maven.sekwah.com" }
//    maven {
//        url "https://minecraft.curseforge.com/api/maven/"
//    }
//}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: project.minecraft_version

    // This is for personal local tests i was doing ignore it ;)
    //mappings channel: 'snapshot', version: '20200706-unofficialtest-1.16.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            forceExit false
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/')

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "../core/src/main/java"
        }
        resources {
            srcDirs "src/generated/resources", "../core/src/main/resources"
        }
    }
}

dependencies {

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.34'

    implementation 'org.spongepowered:mixin:0.8.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    implementation project(":core")

    //compile "com.sekwah:SekCLib:${sekclib_version}:deobf"
    // Trick intellij to allow for better editing in here for the discord task
    // compile "org.apache.httpcomponents:httpmime:4.5.13"

    // compile fg.deobf("curse.maven:neat:${project.neat_fileid}")

    // compile fg.deobf("curse.maven:hwyla:${project.hwyla_fileid}")

    //include('org.ow2.asm:asm-debug-all:5.2')

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    add sourceSets.main, "mixins.${project.modid}.refmap.json"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    finalizedBy 'reobfJar'
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.vendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.${project.modid}.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
    from file("LICENSE")
}

task deobfJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.output
    archiveClassifier.set('deobf')
    from file("LICENSE")
}

tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
    logger.info("Curse api: " + System.getenv("CURSE_API"))
    if (System.getenv("CURSE_API") != null) {
        apiKey = System.getenv("CURSE_API")
    }
    project {
        id = project.curse_project_id
        // TODO add code to reference this but also cut the latest change logs in for the files
        changelog = "${project.github}/blob/${branch}/CHANGELOG.md"
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion '1.17.1'

        mainArtifact(jar){

        }
        addArtifact srcJar
        addArtifact deobfJar
    }
}

task publish {
    doLast {
        println "This is a dummy task to run others for version: ${version}"
    }
}

ext {

    getGitChangelog = this.&getGitChangelog
}

task cleanbuildfolder {
    doLast {
        println "Cleaning up previous builds (to stop publishing old ones by mistake)"
        project.delete(files("${buildDir}/libs"))
    }
}

compileJava.dependsOn 'cleanbuildfolder'

// Publish rules
// Current behavior seems to be canary or release. Though pre-releases may break this pattern.
publish.dependsOn 'build'

publish.finalizedBy 'discordupload'
if (!isCanary) {
    publish.finalizedBy 'curseforge'
}
